# https://nehajirafe.medium.com/using-fft-to-analyse-and-cleanse-time-series-data-d0c793bb82e3
import numpy as np
from scipy.signal import butter,filtfilt
import matplotlib.pyplot as plt
import matplotlib






# Lets start by creating a signal
import numpy as np
# We will use the python scipy library to calculate FFT and then extract the frequency and amplitude from the FFT,
from scipy import fftpack
import pandas as pd

# We will use Butterworth Low Pass Filter , details can be found here , the cutoff frequency will be the peak_frequency[0]
from scipy.signal import butter,filtfilt,square


def generate_signal(time_array):
    # Generate Signal
    signal_freq = 2 # Signal Frequency
    signal_amplitude = 10 # Signal Amplitude
    #Sine wave Signal
    
    # signal = signal_amplitude*np.sin(2*np.pi*signal_freq*time_array)
    signal = signal_amplitude*square(2*np.pi*signal_freq*time_array)
    # The code will generate a 2 hz signal with amplitude of 10


    # Now lets add some 50hz noise with amplitude of 3 to the above signal and create a new Signal
    # Lets add some noise to the Signal
    noise_freq = 50 # Noise Frequency
    noise_amplitude = 3 # Noise Amplitude
    #Sine wave Noise
    noise = noise_amplitude*np.sin(2*np.pi*noise_freq*time_array) #wave
    # Generated Signal with Noise
    noisy_signal = signal + noise

    return signal, noisy_signal



def apply_fft(noisy_signal, time_array, time_interval, total_time):
# FFT to decompose Signal

    sig_noise_fft = fftpack.fft(noisy_signal)
    sig_noise_amp = 2 / time_array.size * np.abs(sig_noise_fft)
    # sig_noise_freq = np.abs(fftpack.fftfreq(time_array.size, 3/1000))

    sig_noise_freq = np.abs(fftpack.fftfreq(time_array.size, time_interval))
    # The following plot can be generated by plotting “sig_noise_freq” vs “sig_noise_amp”

    

    # Calculating the Amplitude
    # All the amplitudes are stored in “sig_noise_amp” , we just need to fetch the top 2 amplitudes from the list
    peak_amplitude = pd.Series(sig_noise_amp).nlargest(2).round(0).astype(int).tolist()
    # Output : [10, 3]

    # Calculating the Frequency
    #Calculate Frequency Magnitude
    magnitudes = abs(sig_noise_fft[np.where(sig_noise_freq >= 0)])
    #Get index of top 2 frequencies
    peak_frequency = np.sort((np.argpartition(magnitudes, -2)[-2:])/total_time)
    # print("peak_frequency = ", peak_frequency)
    return sig_noise_freq, sig_noise_amp, peak_frequency, peak_amplitude



def butter_lowpass_filter(data, cutoff, fs, order):
    # print("applied cutoff freq =  " + str(cutoff))
    nyq = 0.5 * fs # Nyquist Frequency
    normal_cutoff = cutoff / nyq
    # print("normal_cutoff = ", normal_cutoff)
    # Get the filter coefficients 
    b, a = butter(order, normal_cutoff, btype='low', analog=False)
    y = filtfilt(b, a,data)
    return y




def apply_filter(time_array, noisy_signal, sig):

    #Seconds to generate data for
    time_interval = 0.01
    total_number_of_data_sample = len(time_array)
    # print("total sampe = ", total_number_of_data_sample)
    total_time = time_interval*total_number_of_data_sample

    ## =========================================


    # FFT to decompose Signal
    sig_noise_freq, sig_noise_amp, peak_frequency, peak_amplitude = apply_fft(noisy_signal, time_array, time_interval, total_time)
    # The following plot can be generated by plotting “sig_noise_freq” vs “sig_noise_amp”
    # plt.figure("FFT")
    # plt.plot(sig_noise_freq, sig_noise_amp)



    # Filter requirements.
    fs = 100.0       # sample rate, Hz
    cutoff = peak_frequency[0]     # desired cutoff frequency of the filter, Hz ,      slightly higher than actual 2 Hz
    # print(sig, " peak_frequency = ",  peak_frequency)
    # print(sig, " peak_amplitude = ", peak_amplitude)
    print(sig, "suggest cutoff freq = ",  cutoff)


    # cutoff =2
    cutoff = cutoff*50
    if (cutoff <= 1):
        cutoff = 1
    elif (cutoff >= 4.3):
        cutoff = 4.3
    print(sig, "applied cutoff freq =  ", cutoff)


    order = 2      # sin wave can be approx represented as quadratic
        
    # Filter the data, and plot filtered signals.
    filtered_signal = butter_lowpass_filter(noisy_signal, cutoff, fs, order)
    return filtered_signal, sig_noise_freq, sig_noise_amp






# #Seconds to generate data for
# time_interval = 3/1000
# total_number_of_data_sample = 1000
# total_time = time_interval*total_number_of_data_sample
# # total_time = 3
# # time range with total samples of 1000 from 0 to 3 with time interval equals 3/1000
# time_array = np.linspace(0, total_time, total_number_of_data_sample, endpoint=True)

# print(" = ", time_array)
# print("size time_array =", time_array.size)
# signal, noisy_signal = generate_signal(time_array)



## ==========================================
# IMU
imu_data_filename = "/mah/AI/imu_pose/4_8_two_motion_win_50_dt_0.01_imu_data.csv"
gt_data_filename = "/mah/AI/imu_pose/4_8_two_motion_win_50_dt_0.01_gt_data.csv"

imu_data = pd.read_csv(imu_data_filename).values
gt_data = pd.read_csv(gt_data_filename).values

print("imu_data", np.shape(imu_data))
print("gt_data", np.shape(gt_data))


# n1 = 550
n1 = 0
# n2 = n1 + 100* 60*5
n2 = len(imu_data)
imu_data = imu_data[n1:n2,:]
gt_data = gt_data[n1:n2,:]
time_array = imu_data[:,0]
noisy_wx = imu_data[:,1]
noisy_wy = imu_data[:,2]
noisy_wz = imu_data[:,3]
noisy_ax = imu_data[:,4]
noisy_ay = imu_data[:,5]
noisy_az = imu_data[:,6]

noisy_px = gt_data[:,1]
noisy_py = gt_data[:,2]
noisy_pz = gt_data[:,3]



filtered_wx, wx_noise_freq, wx_noise_amp  = apply_filter(time_array, noisy_wx,"wx")
filtered_wy, wy_noise_freq, wy_noise_amp  = apply_filter(time_array, noisy_wy,"wy")
filtered_wz, wz_noise_freq, wz_noise_amp  = apply_filter(time_array, noisy_wz,"wz")

filtered_ax, ax_noise_freq, ax_noise_amp  = apply_filter(time_array, noisy_ax,"ax")
filtered_ay, ay_noise_freq, ay_noise_amp  = apply_filter(time_array, noisy_ay,"ay")
filtered_az, az_noise_freq, az_noise_amp  = apply_filter(time_array, noisy_az,"az")

imu_data_filter = [time_array, filtered_wx, filtered_wy, filtered_wz, filtered_ax, filtered_ay, filtered_az]
imu_data_filter = np.array(imu_data_filter)

print("imu_data_filter", np.shape(imu_data_filter))
print("gt_data", np.shape(gt_data))
print("size imu_data_filter = ", imu_data_filter.shape)
# np.savetxt('/mah/AI/imu_pose/4_8_two_motion_win_50_dt_0.01_imu_data_filter.csv', np.transpose(imu_data_filter), delimiter=',', fmt = '%.9f')
# np.savetxt('/mah/AI/imu_pose/4_8_two_motion_win_50_dt_0.01_gt_data_filter.csv', gt_data, delimiter=',', fmt = '%.9f')


filtered_px, px_noise_freq, px_noise_amp  = apply_filter(time_array, noisy_px,"px")
filtered_py, py_noise_freq, py_noise_amp  = apply_filter(time_array, noisy_py,"py")
filtered_pz, pz_noise_freq, pz_noise_amp  = apply_filter(time_array, noisy_pz,"pz")






plt.figure("FFT Analysis of Noisy Signal")
plt.subplot(321); plt.plot(wx_noise_freq, wx_noise_amp, label='wx'); plt.grid(True);  plt.legend(); plt.xlabel('Frequency'); plt.ylabel('Amplitude'); plt.title("FFT Analysis of Noisy Signal Gyroscope"); 
plt.subplot(323); plt.plot(wy_noise_freq, wy_noise_amp, label='wy'); plt.grid(True);  plt.legend(); plt.xlabel('Frequency'); plt.ylabel('Amplitude')
plt.subplot(325); plt.plot(wz_noise_freq, wz_noise_amp, label='wz'); plt.grid(True);  plt.legend(); plt.xlabel('Frequency'); plt.ylabel('Amplitude')
plt.subplot(322); plt.plot(ax_noise_freq, ax_noise_amp, label='ax'); plt.grid(True);  plt.legend(); plt.xlabel('Frequency'); plt.ylabel('Amplitude'); plt.title("FFT Analysis of Noisy Signal Accelerometer");
plt.subplot(324); plt.plot(ay_noise_freq, ay_noise_amp, label='ay'); plt.grid(True);  plt.legend(); plt.xlabel('Frequency'); plt.ylabel('Amplitude')
plt.subplot(326); plt.plot(ax_noise_freq, az_noise_amp, label='az'); plt.grid(True);  plt.legend(); plt.xlabel('Frequency'); plt.ylabel('Amplitude')



plt.figure("FFT Analysis of Noisy Signal Pos")
plt.subplot(311); plt.plot(px_noise_freq, px_noise_amp, label='px'); plt.grid(True);  plt.legend(); plt.xlabel('Frequency'); plt.ylabel('Amplitude'); plt.title("FFT Analysis of Noisy Signal Pos"); 
plt.subplot(312); plt.plot(py_noise_freq, py_noise_amp, label='py'); plt.grid(True);  plt.legend(); plt.xlabel('Frequency'); plt.ylabel('Amplitude')
plt.subplot(313); plt.plot(pz_noise_freq, pz_noise_amp, label='pz'); plt.grid(True);  plt.legend(); plt.xlabel('Frequency'); plt.ylabel('Amplitude')


plt.figure("Gyroscope (Noisy Data vs Filtered Data)", figsize=[7.5,4.5])
matplotlib.rcParams.update({'font.size': 12})
plt.subplot(321); plt.plot(time_array, noisy_wx, label='Noisy wx'); plt.grid(True);    plt.legend(); plt.title("Gyroscope \n (Noisy Data vs Filtered Data)");
plt.subplot(323); plt.plot(time_array, noisy_wy, label='Noisy wy'); plt.grid(True);    plt.legend()
plt.subplot(325); plt.plot(time_array, noisy_wz, label='Noisy wz'); plt.grid(True);    plt.legend()
plt.subplot(321); plt.plot(time_array, filtered_wx, label='Filtered wx'); plt.grid(True);   plt.legend(); plt.ylabel("$w_x$ (rad/s)")
plt.subplot(323); plt.plot(time_array, filtered_wy, label='Filtered wy'); plt.grid(True);   plt.legend(); plt.ylabel("$w_y$ (rad/s)")
plt.subplot(3,2,5); plt.plot(time_array, filtered_wz, label='Filtered wz'); plt.grid(True);   plt.legend(); plt.ylabel("$w_z$ (rad/s)"); plt.xlabel('Time (sec)')

plt.subplot(322); plt.plot(time_array, noisy_ax, label='Noisy ax'); plt.grid(True);    plt.legend(); plt.title("Accelerometer \n (Noisy Data vs Filtered Data)");
plt.subplot(324); plt.plot(time_array, noisy_ay, label='Noisy ay'); plt.grid(True);    plt.legend()
plt.subplot(326); plt.plot(time_array, noisy_az, label='Noisy az'); plt.grid(True);    plt.legend()
plt.subplot(322); plt.plot(time_array, filtered_ax, label='Filtered ax'); plt.grid(True);   plt.legend(); plt.ylabel("$a_x$ $(m/s^2)$")
plt.subplot(3,2,4); plt.plot(time_array, filtered_ay, label='Filtered ay'); plt.grid(True);   plt.legend(); plt.ylabel("$a_y$ $(m/s^2)$")
plt.subplot(3,2,6); plt.plot(time_array, filtered_az, label='Filtered az'); plt.grid(True);   plt.legend(); plt.ylabel("$a_z$ $(m/s^2$)");plt.xlabel('Time (sec)')

plt.figure("Position Noisy Signal vs Filtered Signal")
plt.subplot(311); plt.plot(time_array, noisy_px, label='noisy_px'); plt.grid(True);    plt.legend(); plt.title("Position Noisy Signal vs Filtered Signal"); 
plt.subplot(312); plt.plot(time_array, noisy_py, label='noisy_py'); plt.grid(True);    plt.legend()
plt.subplot(313); plt.plot(time_array, noisy_pz, label='noisy_pz'); plt.grid(True);    plt.legend()
plt.subplot(311); plt.plot(time_array, filtered_px, label='filtered_px'); plt.grid(True);   plt.legend()
plt.subplot(312); plt.plot(time_array, filtered_py, label='filtered_py'); plt.grid(True);   plt.legend()
plt.subplot(313); plt.plot(time_array, filtered_pz, label='filtered_pz'); plt.grid(True);   plt.legend(); plt.xlabel('time')




plt.legend()
plt.show()


